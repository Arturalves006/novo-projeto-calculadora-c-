#include <stdio.h>
#include <math.h>
#include <stdlib.h>

// Definindo o tamanho máximo do histórico
#define MAX_HISTORICO 100

// Estrutura para armazenar o histórico de cálculos
typedef struct {
    int opcao;
    double num1;
    double num2;
    double resultado;
    char operacao[50];
} Historico;

// Função para calcular o fatorial
long long fatorial(int n) {
    long long fat = 1;
    for (int i = 1; i <= n; i++) {
        fat *= i;
    }
    return fat;
}

// Função para somar duas matrizes
void soma_matrizes(double A[3][3], double B[3][3], double C[3][3], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

// Função para multiplicar duas matrizes
void multiplicacao_matrizes(double A[3][3], double B[3][3], double C[3][3], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Função para registrar o histórico
void registrar_historico(Historico *historico, int *count, int opcao, double num1, double num2, double resultado, const char *operacao) {
    if (*count < MAX_HISTORICO) {
        historico[*count].opcao = opcao;
        historico[*count].num1 = num1;
        historico[*count].num2 = num2;
        historico[*count].resultado = resultado;
        snprintf(historico[*count].operacao, sizeof(historico[*count].operacao), "%s", operacao);
        (*count)++;
    } else {
        printf("Erro: Histórico de cálculos cheio!\n");
    }
}

// Função para exibir o histórico
void exibir_historico(Historico *historico, int count) {
    if (count == 0) {
        printf("Histórico vazio.\n");
    } else {
        printf("\nHistórico de Cálculos:\n");
        for (int i = 0; i < count; i++) {
            printf("%s: %.4lf %.4lf = %.4lf\n", historico[i].operacao, historico[i].num1, historico[i].num2, historico[i].resultado);
        }
    }
}

int main() {
    int opcao, count_historico = 0;
    double num1, num2, resultado;
    Historico historico[MAX_HISTORICO];

    do {
        printf("\nEscolha a operação desejada:\n");
        printf("1. Soma\n");
        printf("2. Subtracao\n");
        printf("3. Multiplicacao\n");
        printf("4. Divisao\n");
        printf("5. Potencia\n");
        printf("6. Raiz Quadrada\n");
        printf("7. Logaritmo Natural (ln)\n");
        printf("8. Logaritmo Base 10\n");
        printf("9. Seno\n");
        printf("10. Cosseno\n");
        printf("11. Tangente\n");
        printf("12. Fatorial\n");
        printf("13. Exponencial (e^x)\n");
        printf("14. Valor Absoluto\n");
        printf("15. Arredondar para Cima (ceil)\n");
        printf("16. Arredondar para Baixo (floor)\n");
        printf("17. Arredondar (round)\n");
        printf("18. Hipotenusa\n");
        printf("19. Graus para Radianos\n");
        printf("20. Radianos para Graus\n");
        printf("21. Área do Círculo\n");
        printf("22. Exibir Histórico\n");
        printf("23. Soma de Matrizes (2x2 ou 3x3)\n");
        printf("24. Multiplicação de Matrizes (2x2 ou 3x3)\n");
        printf("0. Sair\n");
        printf("Digite a opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:  // Soma
                printf("Digite dois números: ");
                scanf("%lf %lf", &num1, &num2);
                resultado = num1 + num2;
                printf("Resultado: %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, num2, resultado, "Soma");
                break;

            case 2:  // Subtração
                printf("Digite dois números: ");
                scanf("%lf %lf", &num1, &num2);
                resultado = num1 - num2;
                printf("Resultado: %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, num2, resultado, "Subtração");
                break;

            case 3:  // Multiplicação
                printf("Digite dois números: ");
                scanf("%lf %lf", &num1, &num2);
                resultado = num1 * num2;
                printf("Resultado: %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, num2, resultado, "Multiplicação");
                break;

            case 4:  // Divisão
                printf("Digite dois números: ");
                scanf("%lf %lf", &num1, &num2);
                if (num2 != 0) {
                    resultado = num1 / num2;
                    printf("Resultado: %.4lf\n", resultado);
                    registrar_historico(historico, &count_historico, opcao, num1, num2, resultado, "Divisão");
                } else {
                    printf("Erro: divisão por zero!\n");
                }
                break;

            case 5:  // Potência
                printf("Digite a base e o expoente: ");
                scanf("%lf %lf", &num1, &num2);
                resultado = pow(num1, num2);
                printf("Resultado: %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, num2, resultado, "Potência");
                break;

            case 6:  // Raiz Quadrada
                printf("Digite um número: ");
                scanf("%lf", &num1);
                if (num1 >= 0) {
                    resultado = sqrt(num1);
                    printf("Resultado: %.4lf\n", resultado);
                    registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Raiz Quadrada");
                } else {
                    printf("Erro: raiz quadrada de número negativo não é definida!\n");
                }
                break;

            case 7:  // Logaritmo Natural (ln)
                printf("Digite um número: ");
                scanf("%lf", &num1);
                if (num1 > 0) {
                    resultado = log(num1);
                    printf("Resultado: %.4lf\n", resultado);
                    registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Logaritmo Natural");
                } else {
                    printf("Erro: logaritmo natural definido apenas para números positivos!\n");
                }
                break;

            case 8:  // Logaritmo Base 10
                printf("Digite um número: ");
                scanf("%lf", &num1);
                if (num1 > 0) {
                    resultado = log10(num1);
                    printf("Resultado: %.4lf\n", resultado);
                    registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Logaritmo Base 10");
                } else {
                    printf("Erro: logaritmo base 10 definido apenas para números positivos!\n");
                }
                break;

            case 9:  // Seno
                printf("Digite o ângulo em graus: ");
                scanf("%lf", &num1);
                resultado = sin(num1 * M_PI / 180.0);
                printf("Resultado (sen): %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Seno");
                break;

            case 10:  // Cosseno
                printf("Digite o ângulo em graus: ");
                scanf("%lf", &num1);
                resultado = cos(num1 * M_PI / 180.0);
                printf("Resultado (cos): %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Cosseno");
                break;

            case 11:  // Tangente
                printf("Digite o ângulo em graus: ");
                scanf("%lf", &num1);
                resultado = tan(num1 * M_PI / 180.0);
                printf("Resultado (tan): %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Tangente");
                break;

            case 12:  // Fatorial
                printf("Digite um número inteiro: ");
                scanf("%d", &num1);
                if (num1 >= 0) {
                    resultado = (double)fatorial((int)num1);
                    printf("Resultado (fatorial): %.0lf\n", resultado);
                    registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Fatorial");
                } else {
                    printf("Erro: fatorial não definido para números negativos!\n");
                }
                break;

            case 13:  // Exponencial (e^x)
                printf("Digite um número: ");
                scanf("%lf", &num1);
                resultado = exp(num1);
                printf("Resultado (e^x): %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Exponencial");
                break;

            case 14:  // Valor Absoluto
                printf("Digite um número: ");
                scanf("%lf", &num1);
                resultado = fabs(num1);
                printf("Resultado (valor absoluto): %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Valor Absoluto");
                break;

            case 15:  // Arredondar para cima (ceil)
                printf("Digite um número: ");
                scanf("%lf", &num1);
                resultado = ceil(num1);
                printf("Resultado (ceil): %.0lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Arredondar para Cima");
                break;

            case 16:  // Arredondar para baixo (floor)
                printf("Digite um número: ");
                scanf("%lf", &num1);
                resultado = floor(num1);
                printf("Resultado (floor): %.0lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Arredondar para Baixo");
                break;

            case 17:  // Arredondar (round)
                printf("Digite um número: ");
                scanf("%lf", &num1);
                resultado = round(num1);
                printf("Resultado (round): %.0lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Arredondar");
                break;

            case 18:  // Hipotenusa
                printf("Digite os catetos do triângulo: ");
                scanf("%lf %lf", &num1, &num2);
                resultado = sqrt(num1 * num1 + num2 * num2);
                printf("Resultado (hipotenusa): %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, num2, resultado, "Hipotenusa");
                break;

            case 19:  // Graus para radianos
                printf("Digite o ângulo em graus: ");
                scanf("%lf", &num1);
                resultado = num1 * (M_PI / 180.0);
                printf("Resultado (graus para radianos): %.4lf rad\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Graus para Radianos");
                break;

            case 20:  // Radianos para graus
                printf("Digite o ângulo em radianos: ");
                scanf("%lf", &num1);
                resultado = num1 * (180.0 / M_PI);
                printf("Resultado (radianos para graus): %.4lf°\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Radianos para Graus");
                break;

            case 21:  // Área do Círculo
                printf("Digite o raio do círculo: ");
                scanf("%lf", &num1);
                resultado = M_PI * num1 * num1;
                printf("Resultado (área do círculo): %.4lf\n", resultado);
                registrar_historico(historico, &count_historico, opcao, num1, 0, resultado, "Área do Círculo");
                break;

            case 22:  // Exibir Histórico
                exibir_historico(historico, count_historico);
                break;

            case 23:  // Soma de Matrizes
                printf("Digite os elementos da primeira matriz 3x3:\n");
                double A[3][3], B[3][3], C[3][3];
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        scanf("%lf", &A[i][j]);
                    }
                }
                printf("Digite os elementos da segunda matriz 3x3:\n");
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        scanf("%lf", &B[i][j]);
                    }
                }
                soma_matrizes(A, B, C, 3);
                printf("Resultado da soma das matrizes:\n");
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        printf("%.2lf ", C[i][j]);
                    }
                    printf("\n");
                }
                registrar_historico(historico, &count_historico, opcao, 0, 0, 0, "Soma de Matrizes");
                break;

            case 24:  // Multiplicação de Matrizes
                printf("Digite os elementos da primeira matriz 3x3:\n");
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        scanf("%lf", &A[i][j]);
                    }
                }
                printf("Digite os elementos da segunda matriz 3x3:\n");
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        scanf("%lf", &B[i][j]);
                    }
                }
                multiplicacao_matrizes(A, B, C, 3);
                printf("Resultado da multiplicação das matrizes:\n");
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        printf("%.2lf ", C[i][j]);
                    }
                    printf("\n");
                }
                registrar_historico(historico, &count_historico, opcao, 0, 0, 0, "Multiplicação de Matrizes");
                break;

            case 0:  // Sair
                printf("Saindo...\n");
                break;

            default:
                printf("Opção inválida! Tente novamente.\n");
        }
    } while (opcao != 0);

    return 0;
}
